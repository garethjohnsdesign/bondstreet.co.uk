{% extends "_layouts/site" %}

{% block main %}

<div class="grid-container">
  <div class="grid-x grid-padding-x grid-padding-y align-center">
    <div class="small-12 medium-8 large-8 cell text-center">
      <h1>Use the interactive map to explore Bond Street</h1>
    </div>
  </div>
</div>

<div class="grid-container">
  <div class="grid-x grid-padding-x grid-padding-y align-center">
    <div class="small-12 medium-8 large-8 cell text-center">
      <ul class="menu align-center">
        {% nav category in craft.categories.group('explore') %}
          <li><a href="{{ category.url }}" class="small sans-bold text-uppercase letter-spacing--loose ">{{ category.title }}</a></li>
        {% endnav %}
      </ul>
    </div>
  </div>
</div>

{% set entries = craft.entries.section('explore').all() %}

{% set category = craft.categories.slug('shopping') %}
{% set shopping = craft.entries.section('explore').relatedTo(category).find() %}

{% set category = craft.categories.slug('hotels') %}
{% set hotels = craft.entries.section('explore').relatedTo(category).find() %}

{% set category = craft.categories.slug('restaurants-and-bars') %}
{% set restaurantsAndBars = craft.entries.section('explore').relatedTo(category).find() %}

{% set category = craft.categories.slug('culture') %}
{% set culture = craft.entries.section('explore').relatedTo(category).find() %}


<div class="grid-x grid-padding-x grid-padding-y align-center">
<div class="small-12 cell">
<div id="map" style="width: 100%; height: 50vh;"></div>
</div>
</div>

<script>
mapboxgl.accessToken = "{{ craft.maps.mapToken }}";
 
/* Map: This represents the map on the page. */
var map = new mapboxgl.Map({
container: "map",
style: "mapbox:///garethjohnsdesign/cju1g1emy19yu1fn0odqdxir1",
zoom: 15,
center: [
-0.144,51.512
],
pitch: 60, // pitch in degrees
bearing: -60, // bearing in degrees
scrollZoom: false,
});

var shopping = {
  "type": "FeatureCollection",
  "features": [
   {% for entry in shopping %}
    {
    type: 'Feature',
    "properties": {
      "description": "{{entry.title}}",
      "phone": "{{ entry.phone }}",
      "address": "{{ entry.location.parts.number }} {{ entry.location.parts.address }}",
      "postalCode": "{{ entry.location.parts.postcode }}",
    },
    geometry: {
    type: "Point",
    coordinates: [{{ entry.location.lng }}, {{ entry.location.lat }}]
    }
    },
    {% endfor %}
  ]
};

var hotels = {
  "type": "FeatureCollection",
  "features": [
   {% for entry in hotels %}
    {
    type: 'Feature',
    "properties": {
      "description": "{{entry.title}}",
      "phone": "{{ entry.phone }}",
      "address": "{{ entry.location.parts.number }} {{ entry.location.parts.address }}",
      "postalCode": "{{ entry.location.parts.postcode }}",
    },
    geometry: {
    type: "Point",
    coordinates: [{{ entry.location.lng }}, {{ entry.location.lat }}]
    }
    },
    {% endfor %}
  ]
};

var restaurantsAndBars = {
  "type": "FeatureCollection",
  "features": [
   {% for entry in restaurantsAndBars %}
    {
    type: 'Feature',
    "properties": {
      "description": "{{entry.title}}",
      "phone": "{{ entry.phone }}",
      "address": "{{ entry.location.parts.number }} {{ entry.location.parts.address }}",
      "postalCode": "{{ entry.location.parts.postcode }}",
    },
    geometry: {
    type: "Point",
    coordinates: [{{ entry.location.lng }}, {{ entry.location.lat }}]
    }
    },
    {% endfor %}
  ]
};

var culture = {
  "type": "FeatureCollection",
  "features": [
   {% for entry in culture %}
    {
    type: 'Feature',
    "properties": {
      "description": "{{entry.title}}",
      "phone": "{{ entry.phone }}",
      "address": "{{ entry.location.parts.number }} {{ entry.location.parts.address }}",
      "postalCode": "{{ entry.location.parts.postcode }}",
    },
    geometry: {
    type: "Point",
    coordinates: [{{ entry.location.lng }}, {{ entry.location.lat }}]
    }
    },
    {% endfor %}
  ]
};

map.addControl(new mapboxgl.NavigationControl());
 
map.on('load', function () {
  // Add the data to your map as a layer
  map.addLayer({
    id: 'restaurantsAndBars',
    type: 'symbol',
    // Add a GeoJSON source containing place coordinates and information.
    source: {
      type: 'geojson',
      data: restaurantsAndBars
    },
    layout: {
      'icon-image': 'map-marker',
      'icon-allow-overlap': true,
    }
  });
  map.addLayer({
      id: 'shopping',
      type: 'symbol',
      // Add a GeoJSON source containing place coordinates and information.
      source: {
        type: 'geojson',
        data: shopping
      },
      layout: {
        'icon-image': 'shop-15',
        'icon-allow-overlap': true,
      }
    });
  map.addLayer({
      id: 'hotels',
      type: 'symbol',
      // Add a GeoJSON source containing place coordinates and information.
      source: {
        type: 'geojson',
        data: hotels
      },
      layout: {
        'icon-image': 'bar-15',
        'icon-allow-overlap': true,
      }
    });
  map.addLayer({
      id: 'culture',
      type: 'symbol',
      // Add a GeoJSON source containing place coordinates and information.
      source: {
        type: 'geojson',
        data: culture
      },
      layout: {
        'icon-image': 'art-gallery-15',
        'icon-allow-overlap': true,
      }
    });

    // When a click event occurs on a feature in the places layer, open a popup at the
    // location of the feature, with description HTML from its properties.
    map.on('click', 'culture', function (e) {
        var coordinates = e.features[0].geometry.coordinates.slice();
        var description = e.features[0].properties.description;

        // Ensure that if the map is zoomed out such that multiple
        // copies of the feature are visible, the popup appears
        // over the copy being pointed to.
        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
        }

        new mapboxgl.Popup()
            .setLngLat(coordinates)
            .setHTML(description)
            .addTo(map);
    });

    // Change the cursor to a pointer when the mouse is over the places layer.
    map.on('mouseenter', 'culture', function () {
        map.getCanvas().style.cursor = 'pointer';
    });

    // Change it back to a pointer when it leaves.
    map.on('mouseleave', 'culture', function () {
        map.getCanvas().style.cursor = '';
    });
});


</script>


<div class="grid-container">
  <div class="grid-x grid-padding-x grid-padding-y small-up-1 medium-up-3 large-up-3">
  {% for entry in entries %}
    {% include "_includes/blocks/excerpt--explore" %}
  {% endfor %}
  </div>
</div>

{% endblock %}