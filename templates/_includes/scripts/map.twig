mapboxgl.accessToken = "{{ craft.maps.mapToken }}";
 
/* Map: This represents the map on the page. */
var map = new mapboxgl.Map({
container: "map",
style: "mapbox:///garethjohnsdesign/cju1g1emy19yu1fn0odqdxir1",
zoom: 15,
center: [
-0.144,
51.512
],
{#
pitch: 60, // pitch in degrees
bearing: -60, // bearing in degrees
#}
pitch: 0, // pitch in degrees
bearing: 0, // bearing in degrees
scrollZoom: false,
});

var places = {
  "type": "FeatureCollection",
  "features": [
   {% for entry in entries %}
   {% set rel = entry.category.one() %}
    {
    type: 'Feature',
    "properties": {
      "description": "{{entry.title}}",
      "url": "{{entry.url}}",
      "phone": "{{ entry.phone }}",
      "address": "{{ entry.location.parts.number }} {{ entry.location.parts.address }}",
      "postalCode": "{{ entry.location.parts.postcode }}",
      "icon": "{% if rel %}{{ rel.title|kebab }}{% else %}map-marker{% endif %}"
    },
    geometry: {
    type: "Point",
    coordinates: [{{ entry.location.lng }}, {{ entry.location.lat }}]
    }
    },
    {% endfor %}
  ]
};

map.addControl(new mapboxgl.NavigationControl());

// Add geolocate control to the map.
map.addControl(new mapboxgl.GeolocateControl({
positionOptions: {
enableHighAccuracy: true
},
trackUserLocation: true
}));
 
map.on('load', function () {
  // Add the data to your map as a layer
  map.addLayer({
      id: 'places',
      type: 'symbol',
      // Add a GeoJSON source containing place coordinates and information.
      source: {
        type: 'geojson',
        data: places
      },
      layout: {
        'icon-image': 'map-marker',
        'icon-size': 0.5,
        'icon-allow-overlap': true,
      }
    });

var markerHeight = 25, markerRadius = 15, linearOffset = 25;
var popupOffsets = {
 'top': [0, markerHeight],
 'top-left': [0,0],
 'top-right': [0,0],
 'bottom': [0, -markerHeight],
 'bottom-left': [linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
 'bottom-right': [-linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
 'left': [markerRadius, (markerHeight - markerRadius) * -1],
 'right': [-markerRadius, (markerHeight - markerRadius) * -1]
 };

// Create a popup, but don't add it to the map yet.
var popup = new mapboxgl.Popup({
offset: popupOffsets,
className: 'my-class',
closeButton: false,
closeOnClick: false
});
 
map.on('mouseenter', 'places', function(e) {
// Change the cursor style as a UI indicator.
map.getCanvas().style.cursor = 'pointer';
 
var coordinates = e.features[0].geometry.coordinates.slice();
var description = e.features[0].properties.description;
var link = e.features[0].properties.url;
 
// Ensure that if the map is zoomed out such that multiple
// copies of the feature are visible, the popup appears
// over the copy being pointed to.
while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
}

map.on('click', 'places', function() {
window.location = (link);
});
 
// Populate the popup and set its coordinates
// based on the feature found.
popup.setLngLat(coordinates)
.setHTML(description)
.addTo(map);
});
 
map.on('mouseleave', 'places', function() {
map.getCanvas().style.cursor = '';
popup.remove();
});

/* Fly to on hover */
{% for entry in entries %}
document.getElementById('{{entry.title | kebab}}').addEventListener('mouseover', function () {


map.flyTo({
center: [{{ entry.location.lng }}, {{ entry.location.lat }}],
zoom: 18,
speed: 1, // make the flying slow
curve: 1, // change the speed at which it zooms out
easing: function (t) {
    return t;
}
});

});
{% endfor %}

});