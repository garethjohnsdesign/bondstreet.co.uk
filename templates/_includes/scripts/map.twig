{% js %}


// 1. Initial Map
// --------------

mapboxgl.accessToken = "{{ craft.maps.mapToken }}";

var start = [-0.144,51.511];

var map = new mapboxgl.Map({
  container: "map",
  style: "mapbox:///garethjohnsdesign/cju1g1emy19yu1fn0odqdxir1?optimize=true",
  zoom: 16,
  center: start,
  pitch: 0,
  bearing: 0,
  scrollZoom: false
});

// 2. Data
// -------

var places = {
  "type": "FeatureCollection",
  "features": [
   {% for entry in entries %}
   {% set rel = entry.category.one() %}
    {
    type: 'Feature',
    "properties": {
      "id": "{{entry.title | kebab}}",
      "description": "{{entry.title}}",
      "url": "{{entry.url}}",
      "phone": "{{ entry.phone }}",
      "address": "{{ entry.location.parts.number }} {{ entry.location.parts.address }}",
      "postalCode": "{{ entry.location.parts.postcode }}",
      "icon": "{% if rel %}{{ rel.title|kebab }}{% else %}map-marker{% endif %}"
    },
    geometry: {
    type: "Point",
    coordinates: [{{ entry.location.lng }}, {{ entry.location.lat }}]
    }
    },
    {% endfor %}
  ]
};

// 3. Markers
// ----------

var popupsMap = {};
for (var i = 0; i < places.features.length; i++) {
  (function(){ // closure over places.features[i] and associated variables is needed  in the callback functions
    var place_closure = places.features[i];
    var coordinates = place_closure.geometry.coordinates.slice();
    var description = place_closure.properties.description;
    var phone = place_closure.properties.phone;
    var link = place_closure.properties.url;
    var popupContent = '<div>' + description + '</div>' + '<div>' + phone + '</div>';
  
  
    var markerElement = document.createElement('div')
    markerElement.className = 'customMarker'
    markerElement.innerHTML = '<a data-place-id="' + place_closure.properties.id + '" href="' + place_closure.properties.url + '"><svg class="icon icon-location"><use xlink:href="/assets/icons/symbol-defs.svg#icon-location"></use></svg></a>'
  
  // 4. Pop-up
  // ---------
  
    var markerHeight = 25, markerRadius = 15, linearOffset = 25;
  
    var popupOffsets = {
     'top': [0, markerHeight],
     'top-left': [0,0],
     'top-right': [0,0],
     'bottom': [0, -markerHeight],
     'bottom-left': [linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
     'bottom-right': [-linearOffset, (markerHeight - markerRadius + linearOffset) * -1],
     'left': [markerRadius, (markerHeight - markerRadius) * -1],
     'right': [-markerRadius, (markerHeight - markerRadius) * -1]
     };
  
    var popup = new mapboxgl.Popup({
      offset: popupOffsets,
      className: 'my-class',
      closeButton: false,
      closeOnClick: false
    });

    popup._marker = markerElement;
  
  
    popupsMap[place_closure.properties.id] = {
      popup: popup, 
      coordinates: coordinates,
      content: popupContent
    };
  
  // 5. Hover
  // --------
  
    $(markerElement).on('mouseenter', function(e) {
      map.getCanvas().style.cursor = 'pointer';
       
      console.log(e)
       
      map.on('click', 'places', function() {
      window.location = (link);
      });
       
      popup.setLngLat(coordinates)
      .setHTML(popupContent).addTo(map);
    });
     
    $(markerElement).on('mouseleave', function() {
      map.getCanvas().style.cursor = '';
      popup.remove();
    });
  
  // 6. Add Marker to Map
  // --------------------
  
    new mapboxgl.Marker(markerElement).setLngLat(places.features[i].geometry.coordinates).addTo(map)
  })();
}

// 7. Navigation Control
// ---------------------

map.addControl(new mapboxgl.NavigationControl());
map.addControl(new mapboxgl.GeolocateControl({
positionOptions: {
enableHighAccuracy: true
},
trackUserLocation: true
}));

// 8. Search
// ---------

function forwardGeocoder(query) {
var matchingFeatures = [];
for (var i = 0; i < places.features.length; i++) {
var feature = places.features[i];

if (feature.properties.description.toLowerCase().search(query.toLowerCase()) !== -1) {
  feature['place_name'] = feature.properties.description;
  feature['center'] = feature.geometry.coordinates;
  feature['place_type'] = ['park'];
  matchingFeatures.push(feature);
}
}
return matchingFeatures;
}

var nav = new MapboxGeocoder({
  accessToken: mapboxgl.accessToken,
  localGeocoder: forwardGeocoder,
  zoom: 20,
  placeholder: "Enter search e.g. Gucci",
  mapboxgl: mapboxgl
});

map.addControl(nav, 'top-left');

// 5.5. Hover on the side

$("#places-list > div").on('mouseenter', function() {
  var id = this.id;

  var popupObj = popupsMap[id];
  
  $("a[data-place-id='" + id + "']").addClass("onHover")
  
  map.flyTo({
    center: popupObj.coordinates,
    zoom: 16,
    speed: 1,
    curve: 1,
    easing: function (t) {return t;}
  });
  popupObj.popup.setLngLat(popupObj.coordinates)
    .setHTML(popupObj.content).addTo(map);
});

$("#places-list > div").on('mouseleave', function() {
  var id = this.id;
  var popupObj = popupsMap[id];
  $("[data-place-id]").removeClass("onHover")
  popupObj.popup.remove();
});

{% endjs %}